package com.matias.features.ui.main.activityimport android.animation.ObjectAnimatorimport android.os.Buildimport android.os.Bundleimport android.os.Handlerimport android.view.Menuimport android.view.Viewimport androidx.core.view.GravityCompatimport androidx.drawerlayout.widget.DrawerLayoutimport androidx.swiperefreshlayout.widget.SwipeRefreshLayoutimport androidx.vectordrawable.graphics.drawable.ArgbEvaluatorimport com.matias.components.bottomnavigation.bottomnavmain.StylingBottomNavMainimport com.matias.components.toolbar.toolbarmain.StylingToolbarMainModeimport com.matias.core.base.mvp.BasePresenterActivityimport com.matias.core.helpers.VectorDrawableHelperimport com.matias.domain.models.featureflag.Featuresimport com.matias.domain.models.item.ItemMainPageModelimport com.matias.features.MainItemPageHelperimport com.matias.features.Rimport com.matias.features.di.main.MainActivityModuleimport com.matias.features.di.main.MainActivitySubcomponentimport com.matias.features.ui.MainUiComponentimport kotlinx.android.synthetic.main.activity_main.*import kotlinx.android.synthetic.main.app_bar_main.*import kotlinx.android.synthetic.main.content_main.*import javax.inject.Injectprivate const val DELAY_TOOLBAR_ICON_ANIMATION = 750Lclass MainActivity : BasePresenterActivity<		MainActivity,		MainActivityPresenter,		MainActivitySubcomponent>(),	MainActivityContract.View, View.OnClickListener, SwipeRefreshLayout.OnRefreshListener {	@Inject	lateinit var mainItemPageHelper: MainItemPageHelper	@Inject	lateinit var vectorDrawableHelper: VectorDrawableHelper	private var itemMainPageList: MutableList<ItemMainPageModel>? = null	private var currentPage: Int = 0	override fun bindComponent(): MainActivitySubcomponent =		MainUiComponent.component.plus(MainActivityModule())	override fun bindLayout(): Int =		R.layout.activity_main	override fun onCreate(savedInstanceState: Bundle?) {		super.onCreate(savedInstanceState)		setContentView(R.layout.activity_main)		setItemMainPageList()		setupSwipeRefresh()		setupToolbar()		if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {			val decor = window.decorView			decor.systemUiVisibility = View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR		}	}	/**	 *	 */	private fun setupSwipeRefresh() {		swipeRefresh.setOnRefreshListener(this)	}	/**	 *	 */	private fun setupToolbar() {		setSupportActionBar(toolbar)		toolbar.navigationIcon = null		supportActionBar?.setDisplayHomeAsUpEnabled(false)	}	/**	 *	 */	private fun initToolbar() {		toolbarMain.apply {			setMode(StylingToolbarMainMode.TO_SEARCH)			setOnCLickListener(this@MainActivity)			animateNavigationIcon(vectorDrawableHelper, DELAY_TOOLBAR_ICON_ANIMATION)		}	}	/**	 *	 */	private fun initBottomNavigationView() {		// TODO: Set Mannage botton nav icon badges.		itemMainPageList?.let {			bottomNav.setup(it, onBottomNavMainItemSelectedListener)		}	}	override fun onClick(view: View?) {		when (view?.id) {			R.id.buttonNavigation -> {				if (!drawerLayout.isDrawerOpen(GravityCompat.START)) drawerLayout.openDrawer(GravityCompat.START)				else drawerLayout.closeDrawer(GravityCompat.END)			}			R.id.buttonSearch -> {				showToast("Search")			}			R.id.buttonCoupon -> {				showToast("Coupons")			}			R.id.buttonNotification -> {				showToast("Notifications")			}			R.id.iconFilterSearchButton,			R.id.labelFilterSearchButton -> {				showToast("Filter Search")			}		}	}	/**	 * Setup the pager that will contain all the main fragments.	 */	private fun setupPager() {		itemMainPageList?.let { itemList ->			pager.apply {				adapter = MainPagerAdapter(itemList, supportFragmentManager, 0)				setSwipePagingEnabled(false)				offscreenPageLimit = 5				setCurrentItem(currentPage, false)			}		}	}	override fun onResume() {		super.onResume()		presenter.getMainPosition()	}	override fun onCreateOptionsMenu(menu: Menu): Boolean =		false	override fun onBackPressed() {		val drawerLayout: DrawerLayout = findViewById(R.id.drawerLayout)		if (drawerLayout.isDrawerOpen(GravityCompat.START)) {			drawerLayout.closeDrawer(GravityCompat.START)		} else {			super.onBackPressed()		}	}	/**	 *	 */	private val onBottomNavMainItemSelectedListener: StylingBottomNavMain.SimpleOnBottomNavMainItemSelectedListener =		object : StylingBottomNavMain.SimpleOnBottomNavMainItemSelectedListener() {			override fun onItemSelected(view: View?, position: Int) {				super.onItemSelected(view, position)				view?.let {					onBottomNavItemSelected(it.tag as Features, position)					currentPage = position				}			}		}	/**	 *	 */	private fun setItemMainPageList() {		itemMainPageList?.clear()		itemMainPageList = mainItemPageHelper.getItemMainPageList(			presenter.getTabEnableList(mainItemPageHelper.tagList)		)	}	/*******************************************************************************************************************	 * [SwipeRefreshLayout.OnRefreshListener] implementation	 */	override fun onRefresh() {		presenter.getMainPosition()	}	/*******************************************************************************************************************	 * [MainActivityContract.View] implementation	 */	override fun showLoading(show: Boolean) {		swipeRefresh.isRefreshing = show	}	override fun onBottomNavItemSelected(tag: Features, position: Int) {		when (tag) {			Features.TAB_HOME,			Features.TAB_PRODUCTS,			Features.TAB_SHOP_CART,			Features.TAB_CONTACT_US,			Features.TAB_PROFILE -> pager.setCurrentItem(position, false)			else -> {			}		}	}	override fun changeStatusBarColor(toColor: Int) {		ObjectAnimator.ofObject(window, "statusBarColor", ArgbEvaluator(), window.statusBarColor, toColor).apply {			duration = 400			start()		}	}	override fun initView() {		setItemMainPageList()		Handler().postDelayed({			initToolbar()			initBottomNavigationView()			setupPager()		}, 500)	}	override fun updateMainFragments() {		setupPager()	}}