package com.matias.features.ui.main.activityimport com.matias.core.base.mvp.BasePresenterimport com.matias.domain.base.exception.FailureTypeimport com.matias.domain.models.featureflag.Featuresimport com.matias.domain.models.mainposition.MainPositionModelimport com.matias.domain.usecases.globalconfig.GetFeatureEnableUseCaseimport com.matias.domain.usecases.mainposition.GetMainPositionUseCaseimport javax.inject.Injectclass MainActivityPresenter @Inject constructor(	private val getFeatureEnableUseCase: GetFeatureEnableUseCase,	private val getMainPositionUseCase: GetMainPositionUseCase) : BasePresenter<MainActivityContract.View>(),	MainActivityContract.Presenter<MainActivityContract.View> {	/*******************************************************************************************************************	 *  [MainActivityContract.Presenter] implementation	 */	override fun getMainPosition() {		view?.apply {			showLoading(true)			getMainPositionUseCase(				{ it.either(::getMainPositionFailure, ::getMainPositionSuccess) },				GetMainPositionUseCase.Params(true)			)		}	}	override fun getTabEnableList(featureList: List<Features>): MutableList<Boolean> {		val tagEnableList: MutableList<Boolean> = mutableListOf()		for (feature in featureList) {			tagEnableList.add(getTabEnable(feature))		}		return tagEnableList	}	private fun getMainPositionSuccess(response: MainPositionModel) {		loadView()	}	private fun getMainPositionFailure(e: FailureType) {		loadView()	}	private fun getTabEnable(feature: Features): Boolean =		getFeatureEnableUseCase.isFeatureAvailable(GetFeatureEnableUseCase.Params(feature))	/**	 * Finish to load the main activity view.	 */	override fun loadView() {		view?.let {			it.showLoading(false)			it.loadView()		}	}}